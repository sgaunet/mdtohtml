# GoReleaser configuration for mdtohtml
# More info: https://goreleaser.com
version: 2

before:
  hooks:
    - go mod download

builds:
  - id: mdtohtml
    binary: mdtohtml
    main: .
    env:
      - CGO_ENABLED=0
    ldflags:
      - -s -w -X main.version={{.Version}}
    goos:
      - linux
      - darwin
      - windows
    goarch:
      - amd64
      - arm
      - arm64
    goarm:
      - "6"
      - "7"
    ignore:
      - goos: darwin
        goarch: "386"
      - goos: windows
        goarch: arm

archives:
  - id: bin
    name_template: '{{ .Binary }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}'
    files:
      - LICENSE
      - README.md
    format_overrides:
      - goos: windows
        formats: [zip]
      - goos: "*"
        formats: [tar.gz]
    ids:
      - mdtohtml

# Include raw binaries in the release
release:
  github:
    owner: sgaunet
    name: mdtohtml
  # Allow replacing existing artifacts in the release
  replace_existing_artifacts: true
  # Removed extra_files as it was causing duplicate uploads
  # The archives and packages are automatically included by default

checksum:
  name_template: 'checksums.txt'
  algorithm: sha256

changelog:
  sort: asc
  filters:
    exclude:
      - '^docs:'
      - '^test:'
      - '^chore:'
      - '^ci:'

# Docker configuration
dockers:
  - goos: linux
    goarch: amd64
    image_templates:
      - "ghcr.io/sgaunet/mdtohtml:latest"
      - "ghcr.io/sgaunet/mdtohtml:{{ .Tag }}"
    skip_push: true  # Set to false in CI/CD
    dockerfile: Dockerfile
    build_flag_templates:
      - "--label=org.opencontainers.image.created={{.Date}}"
      - "--label=org.opencontainers.image.name={{.ProjectName}}"
      - "--label=org.opencontainers.image.revision={{.FullCommit}}"
      - "--label=org.opencontainers.image.version={{.Version}}"
      - "--build-arg=VERSION={{ .Version }}"

    # Path to the Dockerfile (from the project root).
    # extra_files:
    #   - go.mod
    #   - go.sum

brews:
  - homepage: 'https://github.com/sgaunet/mdtohtml'
    description: 'A simple and efficient Markdown to HTML converter'
    directory: Formula
    commit_author:
      name: sgaunet
      email: 1552102+sgaunet@users.noreply.github.com
    repository:
      owner: sgaunet
      name: homebrew-tools
      # Token with 'repo' scope is required for pushing to a different repository
      token: '{{ .Env.HOMEBREW_TAP_TOKEN }}'
    url_template: 'https://github.com/sgaunet/mdtohtml/releases/download/{{ .Tag }}/{{ .ArtifactName }}'
    install: |
      bin.install "mdtohtml"
    test: |
      system "#{bin}/mdtohtml", "--help"

# .goreleaser.yaml
nfpms:
  # note that this is an array of nfpm configs
  -
    # ID of the nfpm config, must be unique.
    # Defaults to "default".
    id: mdtohtml

    # Name of the package.
    # Defaults to `ProjectName`.
    package_name: mdtohtml

    # You can change the file name of the package.
    #
    # Default:`{{ .PackageName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ with .Arm }}v{{ . }}{{ end }}{{ with .Mips }}_{{ . }}{{ end }}{{ if not (eq .Amd64 "v1") }}{{ .Amd64 }}{{ end }}`
    # file_name_template: "{{ .ConventionalFileName }}"

    # Template to your app's homepage.
    # Default is empty.
    homepage: https://github.com/sgaunetmdtohtml

    # Your app's maintainer (probably you).
    # Default is empty.
    maintainer: Sylvain Gaunet <sgaunet@gmail.com>

    # Template to your app's description.
    # Default is empty.
    description: |-
      A simple and efficient Markdown to HTML converter.
      Easily convert your Markdown files to clean, well-formatted HTML.

    # Your app's license.
    # Default is empty.
    license: MIT

    # Formats to be generated.
    formats:
      - apk
      - deb
      - rpm

    # Packages your package depends on.
    # dependencies:
    #   - git
    #   - zsh

    # Packages your package recommends installing.
    # recommends:
    #   - bzr
    #   - gtk

    # Packages your package suggests installing.
    # suggests:
    #   - cvs
    #   - ksh

    # Packages that conflict with your package.
    # conflicts:
    #   - svn
    #   - bash

    # Packages it replaces.
    # replaces:
    #   - fish

    # Template to the path that the binaries should be installed.
    # Defaults to `/usr/bin`.
    bindir: /usr/local/bin

    # Version Epoch.
    # Default is extracted from `version` if it is semver compatible.
    epoch: "2"

    # Section.
    section: default

    # Priority.
    priority: extra

    # Makes a meta package - an empty package that contains only supporting files and dependencies.
    # When set to `true`, the `builds` option is ignored.
    # Defaults to false.
    meta: true

    # Contents to add to the package.
    # Let GoReleaser automatically add the binary
    contents: []

    # Simple config file example (commented out)
    # - src: path/to/local/foo.conf
    #   dst: /etc/foo.conf
    #   type: config

      # Simple symlink.
      # Corresponds to `ln -s /sbin/foo /usr/local/bin/foo`
      # - src: /sbin/foo
      #   dst: /usr/local/bin/foo
      #   type: "symlink"

      # Corresponds to `%config(noreplace)` if the packager is rpm, otherwise it is just a config file
      # - src: path/to/local/bar.conf
      #   dst: /etc/bar.conf
      #   type: "config|noreplace"

      # The src and dst attributes also supports name templates
      # - src: path/{{ .Os }}-{{ .Arch }}/bar.conf
      #   dst: /etc/foo/bar-{{ .ProjectName }}.conf

      # These files are not actually present in the package, but the file names
      # are added to the package header. From the RPM directives documentation:
      #
      # "There are times when a file should be owned by the package but not
      # installed - log files and state files are good examples of cases you might
      # desire this to happen."
      #
      # "The way to achieve this, is to use the %ghost directive. By adding this
      # directive to the line containing a file, RPM will know about the ghosted
      # file, but will not add it to the package."
      #
      # For non rpm packages ghost files are ignored at this time.
      # - dst: /etc/casper.conf
      #   type: ghost
      # - dst: /var/log/boo.log
      #   type: ghost

      # You can use the packager field to add files that are unique to a specific packager
      # - src: path/to/rpm/file.conf
      #   dst: /etc/file.conf
      #   type: "config|noreplace"
      #   packager: rpm
      # - src: path/to/deb/file.conf
      #   dst: /etc/file.conf
      #   type: "config|noreplace"
      #   packager: deb
      # - src: path/to/apk/file.conf
      #   dst: /etc/file.conf
      #   type: "config|noreplace"
      #   packager: apk

      # Sometimes it is important to be able to set the mtime, mode, owner, or group for a file
      # that differs from what is on the local build system at build time.
      # - src: path/to/foo
      #   dst: /usr/local/foo
      #   file_info:
      #     mode: 0644
      #     mtime: 2008-01-02T15:04:05Z
      #     owner: notRoot
      #     group: notRoot

      # Using the type 'dir', empty directories can be created. When building RPMs, however, this
      # type has another important purpose: Claiming ownership of that folder. This is important
      # because when upgrading or removing an RPM package, only the directories for which it has
      # claimed ownership are removed. However, you should not claim ownership of a folder that
      # is created by the distro or a dependency of your package.
      # A directory in the build environment can optionally be provided in the 'src' field in
      # order copy mtime and mode from that directory without having to specify it manually.
      # - dst: /some/dir
      #   type: dir
      #   file_info:
      #     mode: 0700

    # Scripts to execute during the installation of the package.
    # Keys are the possible targets during the installation process
    # Values are the paths to the scripts which will be executed
    # scripts:
    #   preinstall: "scripts/preinstall.sh"
    #   postinstall: "scripts/postinstall.sh"
    #   preremove: "scripts/preremove.sh"
    #   postremove: "scripts/postremove.sh"

    # Some attributes can be overridden per package format.
    # overrides:
    #   deb:
    #     conflicts:
    #       - subversion
    #     dependencies:
    #       - git
    #     suggests:
    #       - gitk
    #     recommends:
    #       - tig
    #     replaces:
    #       - bash
    #   rpm:
    #     replacements:
    #       amd64: x86_64
    #     file_name_template: "{{ .ProjectName }}-{{ .Version }}-{{ .Arch }}"
    #     files:
    #       "tmp/man.gz": "/usr/share/man/man8/app.8.gz"
    #     config_files:
    #       "tmp/app_generated.conf": "/etc/app-rpm.conf"
    #     scripts:
    #       preinstall: "scripts/preinstall-rpm.sh"

    # Custom configuration applied only to the RPM packager.
    # rpm:
    #   # RPM specific scripts.
    #   scripts:
    #     # The pretrans script runs before all RPM package transactions / stages.
    #     pretrans: ./scripts/pretrans.sh
    #     # The posttrans script runs after all RPM package transactions / stages.
    #     posttrans: ./scripts/posttrans.sh

    #   # The package summary.
    #   # Defaults to the first line of the description.
    #   summary: Explicit Summary for Sample Package

    #   # The package group. This option is deprecated by most distros
    #   # but required by old distros like CentOS 5 / EL 5 and earlier.
    #   group: Unspecified

    #   # Compression algorithm.
    #   compression: lzma

    #   # These config files will not be replaced by new versions if they were
    #   # changed by the user. Corresponds to %config(noreplace).
    #   config_noreplace_files:
    #     path/to/local/bar.con: /etc/bar.conf

    #   # These files are not actually present in the package, but the file names
    #   # are added to the package header. From the RPM directives documentation:
    #   #
    #   # "There are times when a file should be owned by the package but not
    #   # installed - log files and state files are good examples of cases you might
    #   # desire this to happen."
    #   #
    #   # "The way to achieve this, is to use the %ghost directive. By adding this
    #   # directive to the line containing a file, RPM will know about the ghosted
    #   # file, but will not add it to the package."
    #   ghost_files:
    #     - /etc/casper.conf
    #     - /var/log/boo.log

    #   # The package is signed if a key_file is set
    #   signature:
    #     # Template to the PGP secret key file path (can also be ASCII-armored).
    #     # The passphrase is taken from the environment variable
    #     # `$NFPM_ID_RPM_PASSPHRASE` with a fallback to `$NFPM_ID_PASSPHRASE`,
    #     # where ID is the id of the current nfpm config.
    #     # The id will be transformed to uppercase.
    #     # E.g. If your nfpm id is 'default' then the rpm-specific passphrase
    #     # should be set as `$NFPM_DEFAULT_RPM_PASSPHRASE`
    #     key_file: '{{ .Env.GPG_KEY_PATH }}'

    # # Custom configuration applied only to the Deb packager.
    # deb:
    #   # Lintian overrides
    #   lintian_overrides:
    #     - statically-linked-binary
    #     - changelog-file-missing-in-native-package

    #   # Custom deb special files.
    #   scripts:
    #     # Deb rules script.
    #     rules: foo.sh
    #     # Deb templates file, when using debconf.
    #     templates: templates

    #   # Custom deb triggers
    #   triggers:
    #     # register interest on a trigger activated by another package
    #     # (also available: interest_await, interest_noawait)
    #     interest:
    #       - some-trigger-name
    #     # activate a trigger for another package
    #     # (also available: activate_await, activate_noawait)
    #     activate:
    #       - another-trigger-name

    #   # Packages which would break if this package would be installed.
    #   # The installation of this package is blocked if `some-package`
    #   # is already installed.
    #   breaks:
    #     - some-package

    #   # The package is signed if a key_file is set
    #   signature:
    #     # Template to the PGP secret key file path (can also be ASCII-armored).
    #     # The passphrase is taken from the environment variable
    #     # `$NFPM_ID_DEB_PASSPHRASE` with a fallback to `$NFPM_ID_PASSPHRASE`,
    #     # where ID is the id of the current nfpm config.
    #     # The id will be transformed to uppercase.
    #     # E.g. If your nfpm id is 'default' then the deb-specific passphrase
    #     # should be set as `$NFPM_DEFAULT_DEB_PASSPHRASE`
    #     key_file: '{{ .Env.GPG_KEY_PATH }}'

    #     # The type describes the signers role, possible values are "origin",
    #     # "maint" and "archive". If unset, the type defaults to "origin".
    #     type: origin

    # apk:
    #   # APK specific scripts.
    #   scripts:
    #     # The preupgrade script runs before APK upgrade.
    #     preupgrade: ./scripts/preupgrade.sh
    #     # The postupgrade script runs after APK.
    #     postupgrade: ./scripts/postupgrade.sh

    #   # The package is signed if a key_file is set
    #   signature:
    #     # Template to the PGP secret key file path (can also be ASCII-armored).
    #     # The passphrase is taken from the environment variable
    #     # `$NFPM_ID_APK_PASSPHRASE` with a fallback to `$NFPM_ID_PASSPHRASE`,
    #     # where ID is the id of the current nfpm config.
    #     # The id will be transformed to uppercase.
    #     # E.g. If your nfpm id is 'default' then the apk-specific passphrase
    #     # should be set as `$NFPM_DEFAULT_APK_PASSPHRASE`
    #     key_file: '{{ .Env.GPG_KEY_PATH }}'


    #     # The name of the signing key. When verifying a package, the signature
    #     # is matched to the public key store in /etc/apk/keys/<key_name>.rsa.pub.
    #     # If unset, it defaults to the maintainer email address.
    #     key_name: origin
